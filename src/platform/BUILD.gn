# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nlio.gni")

import("device.gni")

if (chip_device_platform != "none") {
  declare_args() {
    # Extra header to include in CHIPDeviceConfig.h for project.
    chip_device_project_config_include = ""

    # Date the firmware was built.
    chip_device_config_firmware_build_date = ""

    # Time the firmware was built.
    chip_device_config_firmware_build_time = ""
  }

  config("platform_config") {
    configs = [ "${chip_root}/src:includes" ]

    defines = [ "CONFIG_DEVICE_LAYER=1" ]

    if (chip_device_project_config_include != "") {
      defines += [ "CHIP_DEVICE_PROJECT_CONFIG_INCLUDE=${chip_device_project_config_include}" ]
    }
    if (chip_device_platform_config_include != "") {
      defines += [ "CHIP_DEVICE_PLATFORM_CONFIG_INCLUDE=${chip_device_platform_config_include}" ]
    }

    if (chip_device_config_firmware_build_date != "") {
      defines += [ "CHIP_DEVICE_CONFIG_FIRWMARE_BUILD_DATE=\"${chip_device_config_firmware_build_date}\"" ]
    }
    if (chip_device_config_firmware_build_time != "") {
      defines += [ "CHIP_DEVICE_CONFIG_FIRMWARE_BUILD_TIME=\"${chip_device_config_firmware_build_time}\"" ]
    }

    if (chip_enable_openthread) {
      defines += [
        "CHIP_DEVICE_CONFIG_ENABLE_THREAD=1",
        "CHIP_ENABLE_OPENTHREAD=1",
      ]
    }
  }

  group("platform_base") {
    public_deps = [
      "${chip_root}/src/ble",
      "${chip_root}/src/inet",
      "${chip_root}/src/lib/core:chip_config_header",
      "${chip_root}/src/lib/support",
      "${nlio_root}:nlio",
    ]

    public_configs = [ ":platform_config" ]
  }
}

if (chip_device_platform != "none") {
  static_library("platform") {
    output_name = "libDeviceLayer"

    sources = [
      "../include/platform/CHIPDeviceConfig.h",
      "../include/platform/CHIPDeviceError.h",
      "../include/platform/CHIPDeviceEvent.h",
      "../include/platform/CHIPDeviceLayer.h",
      "../include/platform/ConfigurationManager.h",
      "../include/platform/ConnectivityManager.h",
      "../include/platform/GeneralUtils.h",
      "../include/platform/PersistedStorage.h",
      "../include/platform/PlatformManager.h",
      "../include/platform/SoftwareUpdateManager.h",
      "../include/platform/SoftwareUpdateManagerImpl.h",
      "../include/platform/ThreadStackManager.h",
      "../include/platform/TimeSyncManager.h",
      "../include/platform/internal/BLEManager.h",
      "../include/platform/internal/CHIPDeviceLayerInternal.h",
      "../include/platform/internal/DeviceDescriptionServer.h",
      "../include/platform/internal/DeviceNetworkInfo.h",
      "../include/platform/internal/EventLogging.h",
      "../include/platform/internal/GenericConfigurationManagerImpl.h",
      "../include/platform/internal/GenericConnectivityManagerImpl.h",
      "../include/platform/internal/GenericConnectivityManagerImpl_BLE.h",
      "../include/platform/internal/GenericConnectivityManagerImpl_NoBLE.h",
      "../include/platform/internal/GenericConnectivityManagerImpl_NoThread.h",
      "../include/platform/internal/GenericConnectivityManagerImpl_NoWiFi.h",
      "../include/platform/internal/GenericConnectivityManagerImpl_Thread.h",
      "../include/platform/internal/GenericNetworkProvisioningServerImpl.h",
      "../include/platform/internal/GenericPlatformManagerImpl.h",
      "../include/platform/internal/GenericPlatformManagerImpl_FreeRTOS.h",
      "../include/platform/internal/GenericPlatformManagerImpl_POSIX.h",
      "../include/platform/internal/GenericSoftwareUpdateManagerImpl.h",
      "../include/platform/internal/GenericSoftwareUpdateManagerImpl_BDX.h",
      "../include/platform/internal/NetworkProvisioningServer.h",
      "../include/platform/internal/testing/ConfigUnitTest.h",
      "GeneralUtils.cpp",
      "Globals.cpp",
      "PersistedStorage.cpp",
      "SystemEventSupport.cpp",
      "SystemTimerSupport.cpp",
    ]

    public_deps = [
      ":platform_base",
      "${chip_root}/src/lib/support",
      chip_platform_target,
    ]

    allow_circular_includes_from = [
      chip_platform_target,
      "${chip_root}/src/lib/support",
    ]
  }
} else {
  group("platform") {
  }
}
